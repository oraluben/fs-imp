// Implementation file for parser generated by fsyacc
module IMPParser
#nowarn "64";; // turn off warnings that type variables used in production annotations are instantiated to concrete type
open Microsoft.FSharp.Text.Lexing
open Microsoft.FSharp.Text.Parsing.ParseHelpers
# 1 "IMPParser.fsp"

open IMPNode

# 10 "IMPParser.fs"
// This type is the type of tokens accepted by the parser
type token = 
  | EOF
  | CO
  | COBEGIN
  | COEND
  | SKIP
  | WAIT
  | LPAREN
  | RPAREN
  | IF
  | THEN
  | ELSE
  | ENDIF
  | WHILE
  | DO
  | ENDWHILE
  | ASSIGN
  | AND
  | OR
  | NOT
  | EQ
  | LE
  | PLUS
  | MINUS
  | TIMES
  | TRUE
  | FALSE
  | SEMI
  | INT of (int)
  | NAME of (string)
// This type is used to give symbolic names to token indexes, useful for error messages
type tokenId = 
    | TOKEN_EOF
    | TOKEN_CO
    | TOKEN_COBEGIN
    | TOKEN_COEND
    | TOKEN_SKIP
    | TOKEN_WAIT
    | TOKEN_LPAREN
    | TOKEN_RPAREN
    | TOKEN_IF
    | TOKEN_THEN
    | TOKEN_ELSE
    | TOKEN_ENDIF
    | TOKEN_WHILE
    | TOKEN_DO
    | TOKEN_ENDWHILE
    | TOKEN_ASSIGN
    | TOKEN_AND
    | TOKEN_OR
    | TOKEN_NOT
    | TOKEN_EQ
    | TOKEN_LE
    | TOKEN_PLUS
    | TOKEN_MINUS
    | TOKEN_TIMES
    | TOKEN_TRUE
    | TOKEN_FALSE
    | TOKEN_SEMI
    | TOKEN_INT
    | TOKEN_NAME
    | TOKEN_end_of_input
    | TOKEN_error
// This type is used to give symbolic names to token indexes, useful for error messages
type nonTerminalId = 
    | NONTERM__startstart
    | NONTERM_start
    | NONTERM_a_exp
    | NONTERM_b_exp
    | NONTERM_c_exp

// This function maps tokens to integer indexes
let tagOfToken (t:token) = 
  match t with
  | EOF  -> 0 
  | CO  -> 1 
  | COBEGIN  -> 2 
  | COEND  -> 3 
  | SKIP  -> 4 
  | WAIT  -> 5 
  | LPAREN  -> 6 
  | RPAREN  -> 7 
  | IF  -> 8 
  | THEN  -> 9 
  | ELSE  -> 10 
  | ENDIF  -> 11 
  | WHILE  -> 12 
  | DO  -> 13 
  | ENDWHILE  -> 14 
  | ASSIGN  -> 15 
  | AND  -> 16 
  | OR  -> 17 
  | NOT  -> 18 
  | EQ  -> 19 
  | LE  -> 20 
  | PLUS  -> 21 
  | MINUS  -> 22 
  | TIMES  -> 23 
  | TRUE  -> 24 
  | FALSE  -> 25 
  | SEMI  -> 26 
  | INT _ -> 27 
  | NAME _ -> 28 

// This function maps integer indexes to symbolic token ids
let tokenTagToTokenId (tokenIdx:int) = 
  match tokenIdx with
  | 0 -> TOKEN_EOF 
  | 1 -> TOKEN_CO 
  | 2 -> TOKEN_COBEGIN 
  | 3 -> TOKEN_COEND 
  | 4 -> TOKEN_SKIP 
  | 5 -> TOKEN_WAIT 
  | 6 -> TOKEN_LPAREN 
  | 7 -> TOKEN_RPAREN 
  | 8 -> TOKEN_IF 
  | 9 -> TOKEN_THEN 
  | 10 -> TOKEN_ELSE 
  | 11 -> TOKEN_ENDIF 
  | 12 -> TOKEN_WHILE 
  | 13 -> TOKEN_DO 
  | 14 -> TOKEN_ENDWHILE 
  | 15 -> TOKEN_ASSIGN 
  | 16 -> TOKEN_AND 
  | 17 -> TOKEN_OR 
  | 18 -> TOKEN_NOT 
  | 19 -> TOKEN_EQ 
  | 20 -> TOKEN_LE 
  | 21 -> TOKEN_PLUS 
  | 22 -> TOKEN_MINUS 
  | 23 -> TOKEN_TIMES 
  | 24 -> TOKEN_TRUE 
  | 25 -> TOKEN_FALSE 
  | 26 -> TOKEN_SEMI 
  | 27 -> TOKEN_INT 
  | 28 -> TOKEN_NAME 
  | 31 -> TOKEN_end_of_input
  | 29 -> TOKEN_error
  | _ -> failwith "tokenTagToTokenId: bad token"

/// This function maps production indexes returned in syntax errors to strings representing the non terminal that would be produced by that production
let prodIdxToNonTerminal (prodIdx:int) = 
  match prodIdx with
    | 0 -> NONTERM__startstart 
    | 1 -> NONTERM_start 
    | 2 -> NONTERM_a_exp 
    | 3 -> NONTERM_a_exp 
    | 4 -> NONTERM_a_exp 
    | 5 -> NONTERM_a_exp 
    | 6 -> NONTERM_a_exp 
    | 7 -> NONTERM_b_exp 
    | 8 -> NONTERM_b_exp 
    | 9 -> NONTERM_b_exp 
    | 10 -> NONTERM_b_exp 
    | 11 -> NONTERM_b_exp 
    | 12 -> NONTERM_b_exp 
    | 13 -> NONTERM_b_exp 
    | 14 -> NONTERM_c_exp 
    | 15 -> NONTERM_c_exp 
    | 16 -> NONTERM_c_exp 
    | 17 -> NONTERM_c_exp 
    | 18 -> NONTERM_c_exp 
    | 19 -> NONTERM_c_exp 
    | 20 -> NONTERM_c_exp 
    | _ -> failwith "prodIdxToNonTerminal: bad production index"

let _fsyacc_endOfInputTag = 31 
let _fsyacc_tagOfErrorTerminal = 29

// This function gets the name of a token as a string
let token_to_string (t:token) = 
  match t with 
  | EOF  -> "EOF" 
  | CO  -> "CO" 
  | COBEGIN  -> "COBEGIN" 
  | COEND  -> "COEND" 
  | SKIP  -> "SKIP" 
  | WAIT  -> "WAIT" 
  | LPAREN  -> "LPAREN" 
  | RPAREN  -> "RPAREN" 
  | IF  -> "IF" 
  | THEN  -> "THEN" 
  | ELSE  -> "ELSE" 
  | ENDIF  -> "ENDIF" 
  | WHILE  -> "WHILE" 
  | DO  -> "DO" 
  | ENDWHILE  -> "ENDWHILE" 
  | ASSIGN  -> "ASSIGN" 
  | AND  -> "AND" 
  | OR  -> "OR" 
  | NOT  -> "NOT" 
  | EQ  -> "EQ" 
  | LE  -> "LE" 
  | PLUS  -> "PLUS" 
  | MINUS  -> "MINUS" 
  | TIMES  -> "TIMES" 
  | TRUE  -> "TRUE" 
  | FALSE  -> "FALSE" 
  | SEMI  -> "SEMI" 
  | INT _ -> "INT" 
  | NAME _ -> "NAME" 

// This function gets the data carried by a token as an object
let _fsyacc_dataOfToken (t:token) = 
  match t with 
  | EOF  -> (null : System.Object) 
  | CO  -> (null : System.Object) 
  | COBEGIN  -> (null : System.Object) 
  | COEND  -> (null : System.Object) 
  | SKIP  -> (null : System.Object) 
  | WAIT  -> (null : System.Object) 
  | LPAREN  -> (null : System.Object) 
  | RPAREN  -> (null : System.Object) 
  | IF  -> (null : System.Object) 
  | THEN  -> (null : System.Object) 
  | ELSE  -> (null : System.Object) 
  | ENDIF  -> (null : System.Object) 
  | WHILE  -> (null : System.Object) 
  | DO  -> (null : System.Object) 
  | ENDWHILE  -> (null : System.Object) 
  | ASSIGN  -> (null : System.Object) 
  | AND  -> (null : System.Object) 
  | OR  -> (null : System.Object) 
  | NOT  -> (null : System.Object) 
  | EQ  -> (null : System.Object) 
  | LE  -> (null : System.Object) 
  | PLUS  -> (null : System.Object) 
  | MINUS  -> (null : System.Object) 
  | TIMES  -> (null : System.Object) 
  | TRUE  -> (null : System.Object) 
  | FALSE  -> (null : System.Object) 
  | SEMI  -> (null : System.Object) 
  | INT _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | NAME _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
let _fsyacc_gotos = [| 0us; 65535us; 1us; 65535us; 0us; 1us; 12us; 65535us; 13us; 6us; 14us; 7us; 15us; 8us; 18us; 10us; 19us; 11us; 20us; 9us; 27us; 9us; 28us; 9us; 35us; 12us; 43us; 9us; 45us; 9us; 49us; 9us; 6us; 65535us; 20us; 21us; 27us; 22us; 28us; 23us; 43us; 24us; 45us; 25us; 49us; 26us; 7us; 65535us; 0us; 2us; 29us; 30us; 31us; 32us; 41us; 37us; 46us; 38us; 47us; 39us; 50us; 40us; |]
let _fsyacc_sparseGotoTableRowOffsets = [|0us; 1us; 3us; 16us; 23us; |]
let _fsyacc_stateToProdIdxsTableElements = [| 1us; 0us; 1us; 0us; 2us; 1us; 17us; 1us; 1us; 1us; 2us; 1us; 3us; 4us; 4us; 4us; 5us; 6us; 4us; 4us; 5us; 5us; 6us; 4us; 4us; 5us; 6us; 6us; 5us; 4us; 5us; 6us; 9us; 10us; 4us; 4us; 5us; 6us; 9us; 4us; 4us; 5us; 6us; 10us; 4us; 4us; 5us; 6us; 15us; 1us; 4us; 1us; 5us; 1us; 6us; 1us; 7us; 1us; 8us; 1us; 9us; 1us; 10us; 1us; 11us; 3us; 11us; 12us; 13us; 3us; 12us; 12us; 13us; 3us; 12us; 13us; 13us; 3us; 12us; 13us; 18us; 3us; 12us; 13us; 19us; 3us; 12us; 13us; 20us; 1us; 12us; 1us; 13us; 1us; 14us; 2us; 14us; 17us; 1us; 14us; 2us; 14us; 17us; 1us; 14us; 1us; 15us; 1us; 15us; 1us; 16us; 2us; 17us; 17us; 2us; 17us; 19us; 2us; 17us; 19us; 2us; 17us; 20us; 1us; 17us; 1us; 18us; 1us; 18us; 1us; 18us; 1us; 19us; 1us; 19us; 1us; 19us; 1us; 19us; 1us; 20us; 1us; 20us; 1us; 20us; |]
let _fsyacc_stateToProdIdxsTableRowOffsets = [|0us; 2us; 4us; 7us; 9us; 11us; 13us; 18us; 23us; 28us; 34us; 39us; 44us; 49us; 51us; 53us; 55us; 57us; 59us; 61us; 63us; 65us; 69us; 73us; 77us; 81us; 85us; 89us; 91us; 93us; 95us; 98us; 100us; 103us; 105us; 107us; 109us; 111us; 114us; 117us; 120us; 123us; 125us; 127us; 129us; 131us; 133us; 135us; 137us; 139us; 141us; 143us; |]
let _fsyacc_action_rows = 52
let _fsyacc_actionTableElements = [|6us; 32768us; 2us; 29us; 4us; 36us; 5us; 42us; 8us; 45us; 12us; 49us; 28us; 34us; 0us; 49152us; 2us; 32768us; 0us; 3us; 26us; 41us; 0us; 16385us; 0us; 16386us; 0us; 16387us; 1us; 16388us; 23us; 15us; 1us; 16389us; 23us; 15us; 0us; 16390us; 5us; 32768us; 19us; 18us; 20us; 19us; 21us; 13us; 22us; 14us; 23us; 15us; 3us; 16393us; 21us; 13us; 22us; 14us; 23us; 15us; 3us; 16394us; 21us; 13us; 22us; 14us; 23us; 15us; 3us; 16399us; 21us; 13us; 22us; 14us; 23us; 15us; 2us; 32768us; 27us; 4us; 28us; 5us; 2us; 32768us; 27us; 4us; 28us; 5us; 2us; 32768us; 27us; 4us; 28us; 5us; 0us; 16391us; 0us; 16392us; 2us; 32768us; 27us; 4us; 28us; 5us; 2us; 32768us; 27us; 4us; 28us; 5us; 5us; 32768us; 18us; 20us; 24us; 16us; 25us; 17us; 27us; 4us; 28us; 5us; 2us; 16395us; 16us; 27us; 17us; 28us; 0us; 16396us; 1us; 16397us; 16us; 27us; 3us; 32768us; 7us; 44us; 16us; 27us; 17us; 28us; 3us; 32768us; 9us; 46us; 16us; 27us; 17us; 28us; 3us; 32768us; 13us; 50us; 16us; 27us; 17us; 28us; 5us; 32768us; 18us; 20us; 24us; 16us; 25us; 17us; 27us; 4us; 28us; 5us; 5us; 32768us; 18us; 20us; 24us; 16us; 25us; 17us; 27us; 4us; 28us; 5us; 6us; 32768us; 2us; 29us; 4us; 36us; 5us; 42us; 8us; 45us; 12us; 49us; 28us; 34us; 2us; 32768us; 1us; 31us; 26us; 41us; 6us; 32768us; 2us; 29us; 4us; 36us; 5us; 42us; 8us; 45us; 12us; 49us; 28us; 34us; 2us; 32768us; 3us; 33us; 26us; 41us; 0us; 16398us; 1us; 32768us; 15us; 35us; 2us; 32768us; 27us; 4us; 28us; 5us; 0us; 16400us; 0us; 16401us; 2us; 32768us; 10us; 47us; 26us; 41us; 2us; 32768us; 11us; 48us; 26us; 41us; 2us; 32768us; 14us; 51us; 26us; 41us; 6us; 32768us; 2us; 29us; 4us; 36us; 5us; 42us; 8us; 45us; 12us; 49us; 28us; 34us; 1us; 32768us; 6us; 43us; 5us; 32768us; 18us; 20us; 24us; 16us; 25us; 17us; 27us; 4us; 28us; 5us; 0us; 16402us; 5us; 32768us; 18us; 20us; 24us; 16us; 25us; 17us; 27us; 4us; 28us; 5us; 6us; 32768us; 2us; 29us; 4us; 36us; 5us; 42us; 8us; 45us; 12us; 49us; 28us; 34us; 6us; 32768us; 2us; 29us; 4us; 36us; 5us; 42us; 8us; 45us; 12us; 49us; 28us; 34us; 0us; 16403us; 5us; 32768us; 18us; 20us; 24us; 16us; 25us; 17us; 27us; 4us; 28us; 5us; 6us; 32768us; 2us; 29us; 4us; 36us; 5us; 42us; 8us; 45us; 12us; 49us; 28us; 34us; 0us; 16404us; |]
let _fsyacc_actionTableRowOffsets = [|0us; 7us; 8us; 11us; 12us; 13us; 14us; 16us; 18us; 19us; 25us; 29us; 33us; 37us; 40us; 43us; 46us; 47us; 48us; 51us; 54us; 60us; 63us; 64us; 66us; 70us; 74us; 78us; 84us; 90us; 97us; 100us; 107us; 110us; 111us; 113us; 116us; 117us; 118us; 121us; 124us; 127us; 134us; 136us; 142us; 143us; 149us; 156us; 163us; 164us; 170us; 177us; |]
let _fsyacc_reductionSymbolCounts = [|1us; 2us; 1us; 1us; 3us; 3us; 3us; 1us; 1us; 3us; 3us; 2us; 3us; 3us; 5us; 3us; 1us; 3us; 4us; 7us; 5us; |]
let _fsyacc_productionToNonTerminalTable = [|0us; 1us; 2us; 2us; 2us; 2us; 2us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 4us; 4us; 4us; 4us; 4us; 4us; 4us; |]
let _fsyacc_immediateActions = [|65535us; 49152us; 65535us; 16385us; 16386us; 16387us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 16391us; 16392us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 16398us; 65535us; 65535us; 16400us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 16402us; 65535us; 65535us; 65535us; 16403us; 65535us; 65535us; 16404us; |]
let _fsyacc_reductions ()  =    [| 
# 257 "IMPParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : IMPNode.Program)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                      raise (Microsoft.FSharp.Text.Parsing.Accept(Microsoft.FSharp.Core.Operators.box _1))
                   )
                 : '_startstart));
# 266 "IMPParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'c_exp)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 31 "IMPParser.fsp"
                                     { Stmt = _1 } 
                   )
# 31 "IMPParser.fsp"
                 : IMPNode.Program));
# 277 "IMPParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : int)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 33 "IMPParser.fsp"
                                 Int(_1) 
                   )
# 33 "IMPParser.fsp"
                 : 'a_exp));
# 288 "IMPParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 34 "IMPParser.fsp"
                               Name(_1) 
                   )
# 34 "IMPParser.fsp"
                 : 'a_exp));
# 299 "IMPParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'a_exp)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'a_exp)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 35 "IMPParser.fsp"
                                           AExpression(_1, IMPNode.PLUS, _3) 
                   )
# 35 "IMPParser.fsp"
                 : 'a_exp));
# 311 "IMPParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'a_exp)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'a_exp)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 36 "IMPParser.fsp"
                                            AExpression(_1, IMPNode.MINUS, _3) 
                   )
# 36 "IMPParser.fsp"
                 : 'a_exp));
# 323 "IMPParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'a_exp)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'a_exp)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 37 "IMPParser.fsp"
                                            AExpression(_1, IMPNode.TIMES, _3) 
                   )
# 37 "IMPParser.fsp"
                 : 'a_exp));
# 335 "IMPParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 39 "IMPParser.fsp"
                                  Bool(true) 
                   )
# 39 "IMPParser.fsp"
                 : 'b_exp));
# 345 "IMPParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 40 "IMPParser.fsp"
                                   Bool(false) 
                   )
# 40 "IMPParser.fsp"
                 : 'b_exp));
# 355 "IMPParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'a_exp)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'a_exp)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 41 "IMPParser.fsp"
                                         Compare(_1, IMPNode.EQ, _3) 
                   )
# 41 "IMPParser.fsp"
                 : 'b_exp));
# 367 "IMPParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'a_exp)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'a_exp)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 42 "IMPParser.fsp"
                                         Compare(_1, IMPNode.LE, _3) 
                   )
# 42 "IMPParser.fsp"
                 : 'b_exp));
# 379 "IMPParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'b_exp)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 43 "IMPParser.fsp"
                                    Negative(_2) 
                   )
# 43 "IMPParser.fsp"
                 : 'b_exp));
# 390 "IMPParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'b_exp)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'b_exp)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 44 "IMPParser.fsp"
                                          Bitop(_1, IMPNode.AND, _3) 
                   )
# 44 "IMPParser.fsp"
                 : 'b_exp));
# 402 "IMPParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'b_exp)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'b_exp)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 45 "IMPParser.fsp"
                                         Bitop(_1, IMPNode.OR, _3) 
                   )
# 45 "IMPParser.fsp"
                 : 'b_exp));
# 414 "IMPParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'c_exp)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'c_exp)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 47 "IMPParser.fsp"
                                                          Co(_2, _4) 
                   )
# 47 "IMPParser.fsp"
                 : 'c_exp));
# 426 "IMPParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'a_exp)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 48 "IMPParser.fsp"
                                            Assign(_1, _3) 
                   )
# 48 "IMPParser.fsp"
                 : 'c_exp));
# 438 "IMPParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 49 "IMPParser.fsp"
                                  Skip 
                   )
# 49 "IMPParser.fsp"
                 : 'c_exp));
# 448 "IMPParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'c_exp)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'c_exp)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 50 "IMPParser.fsp"
                                           Sequence(_1, _3) 
                   )
# 50 "IMPParser.fsp"
                 : 'c_exp));
# 460 "IMPParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'b_exp)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 51 "IMPParser.fsp"
                                                   Wait(_3) 
                   )
# 51 "IMPParser.fsp"
                 : 'c_exp));
# 471 "IMPParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'b_exp)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'c_exp)) in
            let _6 = (let data = parseState.GetInput(6) in (Microsoft.FSharp.Core.Operators.unbox data : 'c_exp)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 52 "IMPParser.fsp"
                                                               If(_2, _4, _6) 
                   )
# 52 "IMPParser.fsp"
                 : 'c_exp));
# 484 "IMPParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'b_exp)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'c_exp)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 53 "IMPParser.fsp"
                                                        While(_2, _4) 
                   )
# 53 "IMPParser.fsp"
                 : 'c_exp));
|]
# 497 "IMPParser.fs"
let tables () : Microsoft.FSharp.Text.Parsing.Tables<_> = 
  { reductions= _fsyacc_reductions ();
    endOfInputTag = _fsyacc_endOfInputTag;
    tagOfToken = tagOfToken;
    dataOfToken = _fsyacc_dataOfToken; 
    actionTableElements = _fsyacc_actionTableElements;
    actionTableRowOffsets = _fsyacc_actionTableRowOffsets;
    stateToProdIdxsTableElements = _fsyacc_stateToProdIdxsTableElements;
    stateToProdIdxsTableRowOffsets = _fsyacc_stateToProdIdxsTableRowOffsets;
    reductionSymbolCounts = _fsyacc_reductionSymbolCounts;
    immediateActions = _fsyacc_immediateActions;
    gotos = _fsyacc_gotos;
    sparseGotoTableRowOffsets = _fsyacc_sparseGotoTableRowOffsets;
    tagOfErrorTerminal = _fsyacc_tagOfErrorTerminal;
    parseError = (fun (ctxt:Microsoft.FSharp.Text.Parsing.ParseErrorContext<_>) -> 
                              match parse_error_rich with 
                              | Some f -> f ctxt
                              | None -> parse_error ctxt.Message);
    numTerminals = 32;
    productionToNonTerminalTable = _fsyacc_productionToNonTerminalTable  }
let engine lexer lexbuf startState = (tables ()).Interpret(lexer, lexbuf, startState)
let start lexer lexbuf : IMPNode.Program =
    Microsoft.FSharp.Core.Operators.unbox ((tables ()).Interpret(lexer, lexbuf, 0))
